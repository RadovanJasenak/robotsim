# version 330 core

in vec4 fragmentColor;
in vec3 Normal;
in vec3 fragPos;

uniform vec3 lightColor;
uniform vec3 lightPos;
uniform vec3 viewPos;

out vec4 color;

void main(){
    // ambient lighting
    float ambientStrength = 0.2;
    vec3 ambient = ambientStrength * lightColor;

    // diffuse lighting
    vec3 normal = normalize(Normal);
    vec3 lightDir = normalize(lightPos - fragPos); // light's direction vector
    float diff = max(dot(normal, lightDir), 0.0); // diffuse impact on current fragment
    vec3 diffuse = diff * lightColor; // resulting diffuse component

    // specular lighting
    float specularStrength = 0.5;
    vec3 viewDir = normalize(viewPos - fragPos); // view direction vector
    vec3 reflectDir = reflect(-lightDir, normal); // reflect vector along the normal axis
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32); // 32 is shininess value
    vec3 specular = specularStrength * spec * lightColor;

    vec4 result = vec4(ambient + diffuse + specular, 1.0) * fragmentColor;
    color = result;
}